type: edu
custom_name: stage6
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;
    import java.io.FileNotFoundException;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.util.Scanner;
    import java.io.File;

    class Cryption {
        private String line = "";
        private String mode = "enc";

        private int count = 0;

        private String res = "";
        private String out = "";
        private String in = "";

        private File fileIn;
        private File fileOut;

        public Cryption (String[] args) {
            for (int i = 0; i < args.length; i += 2) {
                switch (args[i]) {
                    case "-out":
                        out = args[i + 1];
                        fileOut = new File(out);
                    case "-in":
                        if (line.isEmpty()) {
                            in = args[i + 1];
                            fileIn = new File(in);
                        }
                        break;
                    case "-data":
                        line = args[i + 1];
                        break;
                    case "-key":
                        count = Integer.parseInt(args[i + 1]);
                        break;
                    case "-mode":
                        mode = args[i + 1];
                        break;
                    default:
                        break;
                }
            }
        }

        public void cryption() {
            if (line.isEmpty()) {
                try (Scanner scanner = new Scanner(fileIn)) {
                    while (scanner.hasNext()) {
                        line += scanner.next() + " ";
                    }
                } catch (FileNotFoundException e) {
                    System.out.println("Error");
                }
            }
            line.trim();
            for (int i = 0; i < line.length(); i++) {
                char ch = (char)(line.charAt(i));
                if (mode == "dec") {
                    ch += count;
                } else  {
                    ch -= count;
                }
                /*
                int indexCh = (int)ch;
                if (indexCh >= 97 && indexCh <= 122) {
                    if (indexCh + count > 122) {
                        int next = (ch + count) % 122;
                        ch = (char)(96 + next);
                    } else {
                        ch = (char)(indexCh + count);
                    }
                }
                */

                res += ch;
            }

            if (!out.isEmpty()) {
                try (FileWriter writer = new FileWriter("Encryption-Decryption/task/test/" + fileOut)) {
                    writer.write(res);
                } catch (IOException e) {
                    System.out.println("Error");
                }
            } else {
                System.out.print(res);
            }
        }
    }



    public class Main {
        public static void main(String[] args) {
            Cryption crypt = new Cryption(args);
            crypt.cryption();

        }
    }
  learner_created: false
- name: test/output.txt
  visible: true
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/46/stages/250/implement">JetBrains
    Academy</a>
  time: Thu, 15 Oct 2020 17:54:46 UTC
record: -1
